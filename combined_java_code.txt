// File: Customer.java
import java.util.ArrayList;
import java.util.List;

public abstract class Customer extends User {
    private String rollNo;
    private List<Order> orderHistory;

    public Customer(String name, String password, String rollNo) {
        super(name, password);
        this.rollNo = rollNo;
        this.orderHistory = new ArrayList<>();
    }
    @Override
    public void viewMenu() {
        System.out.println("customer menu");
    }
    @Override
    public String getLoginID() {
        return rollNo;  // Returns rollNo as the unique login ID for Customer
    }

    public void viewOrderHistory() {
        // Implement viewing order history
    }

    public abstract void placeOrder(Order order);
}


// File: OrderManager.java
public interface OrderManager {
}


// File: TerminalInterface.java
import java.util.Scanner;

public class TerminalInterface {
    private Scanner scanner;

    public TerminalInterface(){
        this.scanner = new Scanner(System.in);
    }
    public void showMainMenu(){
        System.out.println("this is main menu");
        System.out.println("1. Admin Login");
        System.out.println("2. Customer Login");
        System.out.println("3. Exit");

        int choice = scanner.nextInt();
        switch(choice){
            case 1 -> showAdminMenu();
            case 2 -> showCustormerMenu();
            case 3 -> System.out.println("Exiting... Thank You");
        }
    }
    public void showAdminMenu(){
        System.out.println("this is admin menu");
    }
    public void showCustormerMenu(){
        System.out.println("this is customer menu");
    }
    public void showOrderTracking(){
        System.out.println("this is order tracking menu");
    }
    public void handleNavigation(){
        System.out.println("this is navigation handle");
    }
}


// File: DataInitializer.java
import java.util.ArrayList;
import java.util.List;

public class DataInitializer {
    public static List<User> initilizeUsers(){
        List<User> users = new ArrayList<>();
        users.add(new Admin("Admin1","pswd1","A1"));
        users.add(new VIPCustomer("vipUser1", "vipPswd1","2023325"));
        users.add(new RegularCustomer("cust1","custPswd1","2023467"));

        return users;
    }
}


// File: Order.java
public class Order {
}


// File: VIPCustomer.java
public class VIPCustomer extends Customer{

    public VIPCustomer(String name, String password, String rollNo){
        super(name, password, rollNo);
    }

    @Override
    public void placeOrder(Order order) {
        System.out.println("fast fast ordering for vips.");
    }
    public void accessVIPBenefits(){

    }

    @Override
    public void viewMenu() {
        System.out.println("Vip menu");
    }
}


// File: AuthenticationManager.java
import java.util.Map;
import java.util.Scanner;
import java.util.HashMap;

public class AuthenticationManager {
    private Map<String, User> userMap;
    private static Scanner scanner = new Scanner(System.in);

    public AuthenticationManager(){
        userMap = new HashMap<>();
//        for(User user: )
    }
    public User login(String id, String password) throws InvalidLoginException {
        User user = userMap.get(id);
        if (user != null && user.login(id, password)) {
            return user;  // Login successful
        }
        throw new InvalidLoginException("Invalid email or password.");
    }

    // Signup method
    public void signup(User user) {
        if (userMap.containsKey(user.getLoginID())) {
            System.out.println("User already exists.");
        } else {
            userMap.put(user.getLoginID(), user);
            System.out.println("Signup successful!");
        }
    }
}


// File: Main.java

import java.util.Scanner;

public class Main {
    private static AuthenticationManager authenticator = new AuthenticationManager();
    private static Scanner scanner = new Scanner(System.in);


    public static void main(String[] args) {
        while (true) {
            System.out.println("Welcome to IIIT-D Canteen");
            System.out.println("1. Login");
            System.out.println("2. SignUp");
            System.out.println("3. Exit the Application");
            int choice = InputUtils.readInt("Enter your choice: ", 1, 3);
            switch (choice) {
                case 1 -> handleLogin();
                case 2 -> handleSignup();
                case 3 -> System.exit(0);
                default -> System.out.println("Invalid choice, please try again.");
            }
        }
    }
    private static void handleLogin(){
        System.out.println("Enter ID (Roll no for students, AdminID for admins): ");
        String id = scanner.next();
        System.out.println("Enter password: ");
        String password = scanner.next();

        try{
            User user = authenticator.login(id,password);
            user.viewMenu();
        } catch(InvalidLoginException e){
            System.out.println(e.getMessage());
        }
    }
    private static void handleSignup(){
        System.out.println("Sign up as: ");
        System.out.println("1. Admin");
        System.out.println("2. VIP Customer");
        System.out.println("3. Regular Customer");

        int choice = scanner.nextInt();
        System.out.println("Enter name: ");
        String name = scanner.next();
        System.out.println("Enter unique ID (Roll no for students, Admin ID for Admins): ");
        String id = scanner.next();
        System.out.println("Enter password: " );
        String password = scanner.next();

        User newUser = switch(choice){
            case 1 -> new Admin(name, password, id);
            case 2 -> new VIPCustomer(name, password, id);
            case 3 -> new RegularCustomer(name, password, id);
            default -> throw new IllegalArgumentException("Invalid argument");
        };

        authenticator.signup(newUser);

    }
}

// File: RegularCustomer.java
public class RegularCustomer extends Customer {

    public RegularCustomer(String name, String password, String rollNo) {
        super(name, password, rollNo);
    }

    @Override
    public void viewMenu() {
        System.out.println("Regular Customer Menu");
        // Add menu options specific to Regular Customer
    }
//
    @Override
    public String getLoginID(){
        return "ab";
    }

    @Override
    public void placeOrder(Order order) {
        // Implement order placement logic
        System.out.println("Regular customer order here");
    }

    public void accessRegularBenefits() {
        // Regular customer-specific benefits
    }
}


// File: InputUtils.java
import java.util.InputMismatchException;
import java.util.Scanner;

public class InputUtils {

    private static Scanner scanner = new Scanner(System.in);

    public static int readInt(String prompt, int min , int max){
        int input = -1;
        boolean invalidInput = true;
        while(invalidInput){
            System.out.println(prompt);
            try{
                input = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                if(input>= min && input<=max){
                    invalidInput = false;
                }
                else{
                    System.out.println("Please enter a number between "+min+" and "+max);
                }
            } catch (InputMismatchException e){
                System.out.println("Invalid Input. Please enter a numeric value");
                scanner.nextLine();
            }
        }
        return input;
    }

}


// File: ReportGenerator.java
public interface ReportGenerator {
}


// File: InvalidLoginException.java
public class InvalidLoginException extends Exception{
    public InvalidLoginException(String message){
        super(message);
    }
}


// File: User.java
public abstract class User {
    protected String name;
    protected String password;

    public User(String name, String password) {
        this.name = name;
        this.password = password;
    }

    public abstract String getLoginID();  // Each subclass will define its login ID
    public abstract void viewMenu();      // Abstract method for role-specific menus

    public boolean login(String id, String password) {
        return this.getLoginID().equals(id) && this.password.equals(password);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}


// File: Admin.java
public class Admin extends User{
    private String adminId;

    public Admin(String name, String password, String adminId){
        super(name,password);
        this.adminId = adminId;
    }

    @Override
    public String getLoginID() {
        return adminId;
    }
    @Override
    public void viewMenu() {
        System.out.println("Admin Menu");
        // Add menu options specific to Admin
    }

    public void manageMenu(){
        System.out.println("Admin Managing Menu");
    }
    public void processOrder(){
        System.out.println("Admin Processing Order");
    }
    public void generateReport(){
        System.out.println("Admin Generating Reports");
    }
    public void processRefund(Order order){
        System.out.println("Admin Processing Refunds");
    }



}


// File: MenuManager.java
public interface MenuManager {
}


